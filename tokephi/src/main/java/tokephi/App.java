/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tokephi;

import java.util.*;

import org.gephi.project.api.*;
import org.openide.util.Lookup;
import org.gephi.preview.api.*;
import org.gephi.appearance.api.*;
import org.gephi.io.importer.api.ImportController;

// filters
import org.gephi.filters.api.*;
import org.gephi.filters.plugin.graph.DegreeRangeBuilder.DegreeRangeFilter;
import org.gephi.filters.plugin.attribute.AttributeRangeBuilder.*;
import org.gephi.filters.plugin.operator.INTERSECTIONBuilder.IntersectionOperator;

import org.gephi.io.processor.plugin.DefaultProcessor;
import java.awt.Color;
import org.gephi.preview.types.EdgeColor;
import org.gephi.io.exporter.preview.PNGExporter;

import org.gephi.graph.api.*;

import org.gephi.io.importer.api.*;
import java.io.*;

// statistics
import org.gephi.statistics.plugin.*;

// node sizes
import org.gephi.appearance.plugin.RankingNodeSizeTransformer;

// layout algorithms
import org.gephi.layout.plugin.force.StepDisplacement;
import org.gephi.layout.plugin.force.yifanHu.*;
import org.gephi.layout.plugin.forceAtlas2.*;
import org.gephi.layout.plugin.noverlap.NoverlapLayout;

// exporting
import org.gephi.io.exporter.api.ExportController;

// Fun
import java.math.BigInteger;

// Image annotation
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.awt.Font;

public class App {

    public static void main(String[] args) {
        String transactionsFile = "/tmp/peculium.csv";

        //Init a project - and therefore a workspace
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.newProject();
        Workspace workspace = pc.getCurrentWorkspace();

        //Get models and controllers for this new workspace - will be useful later
        GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();
        PreviewModel model = Lookup.getDefault().lookup(PreviewController.class).getModel();
        ImportController importController = Lookup.getDefault().lookup(ImportController.class);
        FilterController filterController = Lookup.getDefault().lookup(FilterController.class);
        AppearanceController appearanceController = Lookup.getDefault().lookup(AppearanceController.class);
        AppearanceModel appearanceModel = appearanceController.getModel();

        //Import file
        Container container;
        try {
            File file_node = new File(transactionsFile);
            container = importController.importFile(file_node);
            container.getLoader().setEdgeDefault(EdgeDirectionDefault.DIRECTED);   //Force DIRECTED
            container.getLoader().setAllowAutoNode(true);  //create missing nodes
            container.getLoader().setEdgesMergeStrategy(EdgeMergeStrategy.NO_MERGE);
            container.getLoader().setAutoScale(true);
            container.getLoader().addEdgeColumn("blockNumber", Integer.class);

        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }

        //Append imported data to GraphAPI
        importController.process(container, new DefaultProcessor(), workspace);

        //See if graph is well imported
        DirectedGraph graph = graphModel.getDirectedGraph();
        System.out.println("Nodes: " + graph.getNodeCount() + " Edges: " + graph.getEdgeCount());

        // Compute balances
        System.out.println("Computing initial balances...");
        Balances balances = new Balances(transactionsFile);

        // set node size to maximum balance ever seen
        for(Node n : graph.getNodes()) {
          String nodeId = (String) n.getId();
          float nodeSize = (float) balances.getMaxAddressRadius(nodeId, 1000);
          System.out.println("Node " + nodeId + ": " + nodeSize);
          n.setSize(nodeSize);
        }


        // Run layout
        ForceAtlas2 layout = new ForceAtlas2(null);
        layout.setGraphModel(graphModel);
        layout.resetPropertiesValues();
        layout.setStrongGravityMode(true);
        layout.setScalingRatio(350.0);
        layout.setOutboundAttractionDistribution(true);

        layout.initAlgo();
        for (int i = 0; i < 4000 && layout.canAlgo(); i++) {
            //System.out.println("goAlgo1: "+i);
            layout.goAlgo();
        }
        layout.setAdjustSizes(true);
        for (int i = 0; i < 4000 && layout.canAlgo(); i++) {
            //System.out.println("goAlgo2: "+i);
            layout.goAlgo();
        }
        layout.endAlgo();


        float minX = 0;
        float maxX = 0;
        float minY = 0;
        float maxY = 0;
        for(Node n : graph.getNodes()) {
          // https://gephi.org/gephi/0.9.2/apidocs/org/gephi/graph/api/Node.html
            float x = n.x();
            float y = n.y();
            float radius = n.size() / 2;
            System.out.println("X: "+x+" Y:"+y+" radius:"+radius);

            n.setColor(new Color(0xFFFFFF));
            if(x - radius < minX) { minX = x - radius; }
            if(y - radius < minY) { minY = y - radius; }
            if(x + radius > maxX) { maxX = x + radius; }
            if(y + radius > maxY) { maxY = y + radius; }
        }
        float xRange = maxX - minX;
        float yRange = maxY - minY;
        float xMargin = xRange * 0.1f;
        float yMargin = yRange * 0.1f;

        System.out.println("minX:"+minX + " maxX:"+ maxX + " minY:"+ minY + " maxY:" + maxY);

        Node n0 = graphModel.factory().newNode("topleft");
        n0.setX(minX-xMargin);
        n0.setY(maxY+yMargin);
        n0.setSize(50.0f);
        n0.setColor(new Color(0x000000));

        Node n1 = graphModel.factory().newNode("bottomright");
        graph.addNode(n0);
        graph.addNode(n1);
        n1.setX(maxX+xMargin);
        n1.setY(minY-yMargin);
        n1.setSize(50.0f);
        n1.setColor(new Color(0x000000));








        try {
          File ffmpeg_output_msg = new File("ffmpeg_output_msg.txt");
          ProcessBuilder pb = new ProcessBuilder(
          //"ffmpeg", "-y", "-r", "1", "-f", "image2pipe", "-pix_fmt", "yuv420p", "-r", "0.1", "-i", "pipe:0", "/tmp/out.avi");
          "ffmpeg", "-y", "-f", "image2pipe", "-framerate", "15", "-i", "-", "-c:v", "libx264", "-vf", "format=yuv420p", "-r", "25", "/tmp/out.mp4");
                  //"ffmpeg","-i","pipe:0","/tmp/out.avi");
          pb.redirectErrorStream(true);
          pb.redirectOutput(ffmpeg_output_msg);
          pb.redirectInput(ProcessBuilder.Redirect.PIPE);
          Process p = pb.start();
          OutputStream ffmpegInput = p.getOutputStream();








        // LOOP TO OUTPUT PARTIAL GRAPH IMAGES

        int counter = 0;
        final int increment = 2500;
        for (int i=balances.getBlockStart(); i<=balances.getBlockEnd(); i+=increment) {
          System.out.println("Up to block " + i+increment);
          balances.goToNextBalanceState(increment);

          for(Node n : graph.getNodes()) {
            String theNodeId = (String) n.getId();
            if(theNodeId.equals("0x30e841b7e65a4111943c61e7305eade48a2fb896") ||
               theNodeId.equals("0x8f67910c2a3ba3c892ef317dcdc2a1ce53e773a1")) {
                 n.setColor(new Color(0xFF0000));
               }
            //System.out.println(theNodeId+" "+balances.getAddressBalance(theNodeId));
            float newSize = (float) balances.getAddressRadius(theNodeId, 1000);
            n.setSize(newSize);
          }
          n0.setSize(50.0f);
          n1.setSize(50.0f);

          AttributeRangeFilter.Edge attributeFilter = new AttributeRangeFilter.Edge(graphModel.getEdgeTable().getColumn("blockNumber"));
          attributeFilter.init(graphModel.getGraph());
          attributeFilter.setRange(new Range(i, i+(2*increment))); // Only edges up till block 6021696
          Query query2 = filterController.createQuery(attributeFilter);
          GraphView view2 = filterController.filter(query2);
          graphModel.setVisibleView(view2);
          graph = graphModel.getDirectedGraphVisible();
          System.out.println("Nodes: " + graph.getNodeCount() + " Edges: " + graph.getEdgeCount());

          //Preview
          model.getProperties().putValue(PreviewProperty.SHOW_NODE_LABELS, Boolean.TRUE);
          Font labelFont = new Font("Arial", Font.PLAIN, 2);
          model.getProperties().putValue(PreviewProperty.NODE_LABEL_FONT,labelFont);

          /*model.getProperties().putValue(PreviewProperty.EDGE_COLOR, new EdgeColor(Color.GRAY));*/
          model.getProperties().putValue(PreviewProperty.EDGE_THICKNESS, new Float(2f));


          model.getProperties().putValue(PreviewProperty.EDGE_COLOR, new EdgeColor(new Color(0xFFFFFF)));
          //model.getProperties().putValue(PreviewProperty.EDGE_OPACITY, new Float(70f));
          model.getProperties().putValue(PreviewProperty.EDGE_CURVED, true);

          //model.getProperties().putValue(PreviewProperty.NODE_BORDER_COLOR, new org.gephi.preview.types.DependantColor(new Color(0xFFFFFF)));
          //model.getProperties().putValue(PreviewProperty.NODE_BORDER_WIDTH, new Float(30f));
          model.getProperties().putValue(PreviewProperty.NODE_OPACITY, new Float(100f));

          model.getProperties().putValue(PreviewProperty.BACKGROUND_COLOR, new Color(0x000000));




          //Export
          ExportController ec = Lookup.getDefault().lookup(ExportController.class);
          PNGExporter pngExporter = (PNGExporter) ec.getExporter("png");
          pngExporter.setHeight(1280);
          pngExporter.setWidth(1280);

          ByteArrayOutputStream output = new ByteArrayOutputStream();
          ec.exportStream(output, pngExporter);
          //System.out.println("Exporting succeeded: "+ output);
          byte[] data = output.toByteArray();
          ByteArrayInputStream input = new ByteArrayInputStream(data);
          try {
            BufferedImage image = ImageIO.read(input);
            Graphics g = image.getGraphics();
            g.setFont(g.getFont().deriveFont(30f));
            String text = "Block: "+i+ " (+"+2*increment+"  window)";
            g.drawString(text, 100, 100);
            g.dispose();

            String filePath = "/tmp/img/plot-"+String.format("%04d" , counter++)+".png";
            ImageIO.write(image, "png", new File(filePath));

            ImageIO.write(image, "PNG", ffmpegInput);
          } catch (IOException ex) {
            ex.printStackTrace();
            return;
          }
        }

        } catch (Exception e) {
          e.printStackTrace();
          return;
        }



    }

    public static void annotateImage(String filePath, String text) {
      try{
        final BufferedImage image = ImageIO.read(new File(filePath));

        Graphics g = image.getGraphics();
        g.setFont(g.getFont().deriveFont(30f));
        g.drawString(text, 100, 100);
        g.dispose();

        ImageIO.write(image, "png", new File(filePath));

      } catch (Exception ex) {
          ex.printStackTrace();
          return;
      }
    }
}
